def new_texture_from_file(path: str) -> int: ...
def new_texture_from_color(width: int, height: int, r: int, g: int, b: int, a: int) -> int: ...
def new_texture_from_data(width: int, height: int, data: list[int]) -> int: ...
def free_texture(texture_id: int) -> None: ...
def bind_texture(texture_id: int) -> None: ...
def get_texture_dimensions(texture_id: int) -> tuple[int, int]: ...

def draw_texture(texture: int, x: float, y: float) -> None: ...
def draw_texture_ext(texture: int, x: float, y: float, width: float, height: float, sx: float, sy: float, sw: float, sh: float, ox: float, oy: float, angle: float) -> None: ...
# def draw_texture_ext(texture: int, x: float, y: float, props: dict[str, float]) -> None: ...
# props include width, height, sx, sy, sw, sh, ox, oy, and angle

def new_shader(vertex_src: str, fragment_src: str) -> int: ...
def free_shader(shader_id: int) -> None: ...
def bind_shader(shader_id: int) -> None: ...
def get_shader_uniform_location(shader_id: int, name: str) -> int: ...
def set_shader_uniform_mat4x4(shader_id: int, location: int) -> None: ...

def new_mesh(data: list[float], attributes: list[int]) -> int: ...
def free_mesh(mesh_id: int) -> None: ...
def draw_mesh(mesh_id: int) -> None: ...
